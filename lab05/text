def crank_nicolson(n, L, R, K, T, theta=0.5, approx=1):
    u = np.zeros((K + 1, n + 1))  
    tau = T / K  
    h = (R - L) / n  
    sigma = tau / (h * h)  

    for i in range(n + 1):
        u[0][i] = u_start(xi(L, i, h))  

    for k in range(K):
        a = np.zeros(n + 1)  
        b = np.zeros(n + 1)  
        c = np.zeros(n + 1)  
        d = np.zeros(n + 1)  

        for i in range(1, n):
            # Коэффициенты для трехдиагональной матрицы
            a[i] = -sigma * theta
            b[i] = 1 + 2 * sigma * theta
            c[i] = -sigma * theta

            # Правая часть
            d[i] = (
                sigma * (1 - theta) * u[k][i - 1]
                + (1 - 2 * sigma * (1 - theta)) * u[k][i]
                + sigma * (1 - theta) * u[k][i + 1]
                + tau * (
                    theta * f(time(k + 1, tau), xi(L, i, h))
                    + (1 - theta) * f(time(k, tau), xi(L, i, h))
                )
            )


    if approx == 1:
        # x=0 (условие Дирихле)
        a[0] = 0
        b[0] = 1
        c[0] = 0
        d[0] = u_left(time(k + 1, tau))

        # x=R (условие Неймана)
        if theta == 0:
            # Для явной схемы используем значение производной на слое k
            u_x_right = ux_right(time(k, tau))
        else:
            # Для неявной схемы и схемы Кранка-Николсона используем слой k+1
            u_x_right = ux_right(time(k + 1, tau))

        a[-1] = -1
        b[-1] = 1
        c[-1] = 0
        d[-1] = u_x_right * h

    elif approx == 2:
        # x=0 (условие Дирихле)
        a[0] = 0
        b[0] = 1
        c[0] = 0
        d[0] = u_left(time(k + 1, tau))

        # x=R (трехточечная аппроксимация второго порядка для условия Неймана)
        if theta == 0:
            # Для явной схемы используем значение производной на слое k
            u_x_right = ux_right(time(k, tau))
        else:
            # Для неявной схемы и схемы Кранка-Николсона используем слой k+1
            u_x_right = ux_right(time(k + 1, tau))

        # Коэффициенты для трехточечной аппроксимации второго порядка
        a[-1] = -1 / (2 * h)  # Коэффициент при u_{n-1}^{k+1}
        b[-1] = 0             # Коэффициент при u_n^{k+1} (нулевой, переносим в правую часть)
        c[-1] = 1 / (2 * h)   # Коэффициент при u_{n-2}^{k+1}
        d[-1] = u_x_right     # Правая часть содержит значение производной

    elif approx == 3:
        # x=0 (условие Дирихле)
        a[0] = 0
        b[0] = 1
        c[0] = 0
        d[0] = u_left(time(k + 1, tau))

        # x=R (двухточечная аппроксимация второго порядка с учетом времени для условия Неймана)
        g = (h * h) / (2 * tau)

        if theta == 0:
            # Для явной схемы используем значения на слое k
            u_x_right = ux_right(time(k, tau))
            f_value = f(time(k, tau), xi(L, n, h))
            u_prev = u[k][-1]
        else:
            # Для неявной схемы и схемы Кранка-Николсона используем слой k+1
            u_x_right = ux_right(time(k + 1, tau))
            f_value = f(time(k + 1, tau), xi(L, n, h))
            u_prev = u[k][-1]  # Значение на предыдущем слое

        # Коэффициенты для двухточечной аппроксимации второго порядка с учетом времени
        a[-1] = 1                 # Коэффициент при u_{n-1}^{k+1}
        b[-1] = -1 - g            # Коэффициент при u_n^{k+1}
        c[-1] = 0                 # Нет зависимости от u_{n+1}^{k+1}
        d[-1] = (
            -g * u_prev
            - g * tau * f_value
            - h * u_x_right
        )  # Правая часть уравнения



        # Решение трехдиагональной системы
        solve = solve_triag(a, b, c, d)
        u[k + 1] = solve 

    return u